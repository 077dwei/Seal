package com.junkfood.seal.ui.page.settings.network

import android.util.Log
import android.webkit.CookieManager
import android.webkit.WebView
import android.webkit.WebViewClient
import androidx.activity.compose.BackHandler
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.Close
import androidx.compose.material.icons.outlined.Done
import androidx.compose.material3.CenterAlignedTopAppBar
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.viewinterop.AndroidView
import com.junkfood.seal.R
import com.junkfood.seal.ui.component.connectWithDelimiter
import com.junkfood.seal.util.PreferenceUtil
import com.junkfood.seal.util.PreferenceUtil.COOKIES_DOMAIN

private const val TAG = "WebViewPage"

data class Cookie(
    val domain: String = "",
    val name: String = "",
    val value: String = "",
    val includeSubdomains: Boolean = true,
    val path: String = "/",
    val secure: Boolean = true,
    val expiry: Long = 0L,
) {
    constructor(
        url: String,
        name: String,
        value: String
    ) : this(domain = url.toDomain(), name = name, value = value)

}

fun Cookie.toNetscapeCookieString(): String {
    return connectWithDelimiter(
        domain,
        includeSubdomains.toString(),
        path,
        secure.toString(),
        expiry.toString(),
        name,
        value,
        delimiter = "\t\t\t"
    )
}

private fun String.toDomain(): String {
    val regex = Regex("http(s)?://(www|m)?|/.*")
    return this.replace(regex, "")
}

private fun makeCookie(url: String, cookieString: String): Cookie {
    cookieString.split("=").run {
        return Cookie(url = url, name = first(), value = last())
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun WebViewPage(onDismissRequest: () -> Unit) {
    val cookieManager = CookieManager.getInstance()
    val cookieSet = mutableSetOf<Cookie>()
    val context = LocalContext.current
    val webView = WebView(context).apply {
        settings.javaScriptEnabled = true
        loadUrl(PreferenceUtil.getString(COOKIES_DOMAIN, ""))
        cookieManager.acceptThirdPartyCookies(this)
        webViewClient = object : WebViewClient() {
            override fun onPageFinished(view: WebView, url: String) {
                super.onPageFinished(view, url)
                cookieManager.getCookie(url)?.let { cookieString ->
                    cookieString.split("; ").forEach {
                        val cookie = makeCookie(url, it)
                        cookieSet.add(cookie)
                        Log.d(TAG, cookie.toNetscapeCookieString())
                    }
                }
                Log.d(TAG, "onPageFinished: $url")
            }
        }
    }
    BackHandler(webView.canGoBack()) {
        webView.goBack()
    }
    Scaffold(modifier = Modifier.fillMaxSize(), topBar = {
        CenterAlignedTopAppBar(title = {}, navigationIcon = {
            IconButton(
                onClick = { onDismissRequest() }) {
                Icon(
                    imageVector = Icons.Outlined.Close,
                    stringResource(id = R.string.close)
                )
            }
        })
    }, floatingActionButton = {
        FloatingActionButton(onClick = {
            val builder =
                StringBuilder("# Netscape HTTP Cookie File\n" +
                        "# Auto-generated by Seal built-in WebView\n")
            cookieSet.forEach {
                builder.append("\n").append(it.toNetscapeCookieString())
            }
            PreferenceUtil.updateString(
                PreferenceUtil.COOKIES_FILE,
                builder.toString()
            )
            onDismissRequest()
        }) {
            Icon(
                Icons.Outlined.Done,
                stringResource(id = com.google.android.material.R.string.abc_action_mode_done)
            )
        }
    }) { paddingValues ->
        AndroidView(
            factory = { context ->
                webView
            }, modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
        )


    }
}